<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Test on Joan Tolos</title>
    <link>http://www.joantolos.com/categories/test/</link>
    <description>Recent content in Test on Joan Tolos</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 04 Jan 2021 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://www.joantolos.com/categories/test/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Java, Spring and Hibernate microservice seed</title>
      <link>http://www.joantolos.com/blog/java_spring_hibernate_postgres/</link>
      <pubDate>Mon, 04 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>http://www.joantolos.com/blog/java_spring_hibernate_postgres/</guid>
      <description>I am frequently doing posts about TDD and trying to facilitate code seeds with everything in place to work with TDD, for example here or here .
This time I want to provide a step by step guide for a microservice that will work with Java, Spring, Hibernate and Postgres that will be TDD ready from localhost all the way up to production. The challenge here, is to set up a comfortable way to test when dealing with a database and Spring.</description>
    </item>
    
    <item>
      <title>Dealing with JSON in Java</title>
      <link>http://www.joantolos.com/blog/dealing_with_json_in_java/</link>
      <pubDate>Thu, 03 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>http://www.joantolos.com/blog/dealing_with_json_in_java/</guid>
      <description>I have been working with Javascript for a while (TypeScript actually) and one of the features that I found interesting is the way you can deal with JSON with javascript. Create, modify and manipulate a JSON object with javascript is very easy and intuitive. It actually allows you to do whatever you want so you may break the JSON if you are not careful.
Trying to do this kind of manipulations with Java is possible, but does not come out of the box and some libraries will be needed.</description>
    </item>
    
    <item>
      <title>How to sort and paginate your table with Typescript</title>
      <link>http://www.joantolos.com/blog/tablemanager/</link>
      <pubDate>Sun, 03 May 2020 00:00:00 +0000</pubDate>
      
      <guid>http://www.joantolos.com/blog/tablemanager/</guid>
      <description>You should always delegate your sorting and pagination needs to the data retriever engine that you are using. For example, if it is a classical relational database you should use ORDER BY, OFFSET, FETCH, LIMIT and whatever mechanisms you have available. Same thing with NoSQL databases. These things are designed to perform well when asking for this kind of sorting and pagination features. So, you should always go for them.</description>
    </item>
    
    <item>
      <title>6 tools to help you do TDD with Java and Spring Cloud</title>
      <link>http://www.joantolos.com/blog/katasongsapi/</link>
      <pubDate>Fri, 06 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>http://www.joantolos.com/blog/katasongsapi/</guid>
      <description>I am always trying to manifest the benefits of TDD (see: The real reason why you don&amp;#39;t like TDD and TDD: All in ). Most of the times when I find colleges that “can’t” do it right away it is because their software is not “TDD ready” meaning that it is difficult to test. Solving that pitfall alone is going to improve your software because good code is easy to test, generally speaking.</description>
    </item>
    
    <item>
      <title>The real reason why you don&#39;t like TDD</title>
      <link>http://www.joantolos.com/blog/tddcasestudy/</link>
      <pubDate>Mon, 10 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>http://www.joantolos.com/blog/tddcasestudy/</guid>
      <description>Have you ever read somebody&amp;rsquo;s code and thought: &amp;ldquo;that is just beautiful, I wish I could code like this&amp;rdquo;? The answer is simple: nobody codes like this at first attempt. Good code is always the result of several refactoring, iterations, reviews and improvements. Most of the time made by more than one person.
So the goal as developers should be to write the best code that we can. In order to do that we should consider has many tools and techniques as possible.</description>
    </item>
    
    <item>
      <title>6 tools to help you do TDD with NodeJS</title>
      <link>http://www.joantolos.com/blog/javascripttrifecta/</link>
      <pubDate>Thu, 03 May 2018 00:00:00 +0000</pubDate>
      
      <guid>http://www.joantolos.com/blog/javascripttrifecta/</guid>
      <description>I am using NodeJS more and more to implement middleware services instead of Java. That means that I am dealing with Javascript on a daily basis. In order to add features with guaranties, I code with TDD ( and only TDD ) and that means that I need a few tools to code comfortably:
 Some BDD or asserting framework Some Code Coverage framework ( I use code coverage to inspire refactors ) Some mocking device  Mocha  Mocha is a feature-rich JavaScript test framework running on Node.</description>
    </item>
    
    <item>
      <title>Code coverage as a tool</title>
      <link>http://www.joantolos.com/blog/katamarsrover/</link>
      <pubDate>Tue, 06 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>http://www.joantolos.com/blog/katamarsrover/</guid>
      <description>I want to explain how I use the code coverage as a tool when I code. I don&amp;rsquo;t really care for the final number of test coverage, if you code using TDD this number will be very high anyway. I don&amp;rsquo;t think that we can trust the quality of our code by some test coverage percentage, we all know that figures can be easily hacked, so there is no point on taking much attention at the final count.</description>
    </item>
    
    <item>
      <title>Tennis Kata</title>
      <link>http://www.joantolos.com/blog/katatennis/</link>
      <pubDate>Fri, 19 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>http://www.joantolos.com/blog/katatennis/</guid>
      <description>For those not familiar with the concept of kata in programming, I can not make a better definition that the one on Code Kata:   A kata is an exercise in karate where you repeat a form many, many times, making little improvements in each. The intent behind code kata is similar. Each is a short exercise (perhaps 30 minutes to an hour long). Some involve programming, and can be coded in many different ways.</description>
    </item>
    
    <item>
      <title>Social Networking Kata</title>
      <link>http://www.joantolos.com/blog/kata/</link>
      <pubDate>Fri, 01 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>http://www.joantolos.com/blog/kata/</guid>
      <description>Introducing katas  For those not familiar with the concept of kata in programming, I can not make a better definition that the one on Code Kata:   A kata is an exercise in karate where you repeat a form many, many times, making little improvements in each. The intent behind code kata is similar. Each is a short exercise (perhaps 30 minutes to an hour long). Some involve programming, and can be coded in many different ways.</description>
    </item>
    
    <item>
      <title>TDD: All in</title>
      <link>http://www.joantolos.com/blog/tddallin/</link>
      <pubDate>Thu, 02 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>http://www.joantolos.com/blog/tddallin/</guid>
      <description>The setup We faced a complicated release to production on our team. We had to include a brand new feature that will stress the application on different levels: user interface, backend and data. We had also a small window to release it so the pressure was high. Let&amp;rsquo;s establish a little bit the requirements, on a high level (without revealing details of the business).

We had to implement the new feature using the green boxes.</description>
    </item>
    
    <item>
      <title>Test driven architecture</title>
      <link>http://www.joantolos.com/blog/testdrivenarchitecture/</link>
      <pubDate>Sun, 10 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://www.joantolos.com/blog/testdrivenarchitecture/</guid>
      <description>I have been revisiting the classic by Kent Beck, “Extreme Programming Explained”, and I found a very interesting thought about one of the roles on the XP team: architects.
Communicating architectural intent According to his definition:
[…] architects on and XP team look for and execute large-scale refactoring, write system-level tests that stress the architecture, and also implement stories. […]
What I find interesting about that, is the system level tests as they can communicate architectural intent.</description>
    </item>
    
    <item>
      <title>Cobertura and Maven</title>
      <link>http://www.joantolos.com/blog/cobertura/</link>
      <pubDate>Wed, 26 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>http://www.joantolos.com/blog/cobertura/</guid>
      <description>The problem Most of developers have used or heard about Cobertura tool to calculate test coverage on Java code. The main problem with that tool is that is difficult to use inside a multi-module maven project, where some module contains tests that uses java classes on several other modules. The result on that cases is a poor coverage or zero percent, just because is not taking into account all the modules implies.</description>
    </item>
    
    <item>
      <title>Cucumber, Java and BDD</title>
      <link>http://www.joantolos.com/blog/cucumber/</link>
      <pubDate>Wed, 26 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>http://www.joantolos.com/blog/cucumber/</guid>
      <description>Some context Behavior-driven development (BDD) is a software development process that emerged from test-driven development (TDD). It combines the general techniques and principles of TDD with ideas from domain-driven design and object-oriented analysis and design to provide software development and management teams with shared tools and a shared process to collaborate on software development.
BDD tools Although BDD is principally an idea about how software development should be managed by both business interests and technical insight, the practice of BDD does assume the use of specialised software tools to support the development process.</description>
    </item>
    
  </channel>
</rss>